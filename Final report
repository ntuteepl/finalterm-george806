#include<iostream>
#include<cmath>
using namespace std;



class Character
{
protected:
	static const int EXP_LV = 100;
	string name;
	int hp;
	int level;
	int exp;
	int power;
	int knowledge;
	int luck;
	void levelUp(int hInc, int pInc, int kInc, int lInc);
public:
	Character(string n, int lv, int h, int po, int kn, int lu);
	virtual void print();
	virtual void beatMonster(int exp) = 0;
	virtual void setHP(int) = 0;
	virtual int getHP() = 0;
	virtual int getAttack() = 0;
	string getName();
};

Character::Character(string n, int lv, int h, int po, int kn, int lu) : name(n), level(lv), exp(pow(lv - 1, 2) * EXP_LV), hp(h), power(po), knowledge(kn), luck(lu) { }

string Character::getName()
{
	return this->name;
}

void Character::levelUp(int hInc, int pInc, int kInc, int lInc) 
{
	this->level++;
	this->hp += hInc;
	this->power += pInc;
	this->knowledge += kInc;
	this->luck += lInc;
}

void Character::print()
{
	cout << this->name << ": " << this->level << " (" << this->exp << "/" << pow(this->level, 2) * EXP_LV << "), ";
	if(this->hp >= 0)
		cout << this->hp;
	else
		cout << "0";

	cout << "-" << this->power << "-" << this->knowledge << "-" << this->luck << "\n";
}

class Warrior : public Character
{
private:
	static const int HP_LV = 100;
	static const int PO_LV = 10;
	static const int KN_LV = 5;
	static const int LU_LV = 5;
public:
	Warrior(string n, int lv = 1) : Character(n, lv, lv* HP_LV, lv * PO_LV, lv * KN_LV, lv * LU_LV) {}
	void print() { cout << "Warrior "; Character::print(); }
	int getHP() { return hp; } 
	void setHP(int hp) { this->hp = hp; } 
	int getAttack() { return power; }
	void beatMonster(int exp) // function overriding
	{
		this->exp += exp;
		while(this->exp >= pow(this->level, 2) * EXP_LV)
			this->levelUp(HP_LV, PO_LV, KN_LV, LU_LV);
	}
};

class Wizard : public Character
{
private:
	static const int HP_LV = 80;
	static const int PO_LV = 4;
	static const int KN_LV = 15;
	static const int LU_LV = 7;
public:
	Wizard(string n, int lv = 1) : Character(n, lv, lv * HP_LV, lv * PO_LV, lv * KN_LV, lv * LU_LV) {}
	void print() { cout << "Wizard "; Character::print(); }
	int getHP() { return hp; } 
	void setHP(int hp) { this->hp = hp; } 
	int getAttack() { return knowledge; }
	void beatMonster(int exp) // function overriding
	{
		this->exp += exp;
		while(this->exp >= pow(this->level, 2) * EXP_LV)
			this->levelUp(HP_LV, PO_LV, KN_LV, LU_LV);
	}
};

class DawnWarrior : public Character
{
private:
	static const int HP_LV = 90;
	static const int PO_LV = 8;
	static const int KN_LV = 8;
	static const int LU_LV = 7;
public:
	DawnWarrior(string n, int lv = 1) : Character(n, lv, lv* HP_LV, lv * PO_LV, lv * KN_LV, lv * LU_LV) {}
	void print() { cout << "DawnWarrior "; Character::print(); }
	int getHP() { return hp; } 
	void setHP(int hp) { this->hp = hp; } 
	int getAttack() { return (power+knowledge)/2; }
	void beatMonster(int exp) // function overriding
	{
		this->exp += exp;
		while(this->exp >= pow(this->level, 2) * EXP_LV)
			this->levelUp(HP_LV, PO_LV, KN_LV, LU_LV);
	}
};


class Berserkers : public Character
{
private:
	static const int HP_LV = 120;
	static const int PO_LV = 6;
	static const int KN_LV = 2;
	static const int LU_LV = 6;
public:
	Berserkers(string n, int lv = 1) : Character(n, lv, lv* HP_LV, lv * PO_LV, lv * KN_LV, lv * LU_LV) {}
	void print() { cout << "Berserkers "; Character::print(); }
	int getHP() { return hp; } 
	void setHP(int hp) { this->hp = hp; } 
	int getAttack() { return power+(float)(HP_LV-hp)/HP_LV*power/2; }
	void beatMonster(int exp) // function overriding
	{
		this->exp += exp;
		while(this->exp >= pow(this->level, 2) * EXP_LV)
			this->levelUp(HP_LV, PO_LV, KN_LV, LU_LV);
	}
};

class Monster : public Character
{
public:
	Monster(int h, int po, int kn) : Character("", 0, h, po, kn, 0) {}
	void print() { cout << "Monster "; Character::print(); }
	int getHP() { return hp; } 
	void setHP(int hp) { this->hp = hp; } 
	int getAttack() { return power; }
	void beatMonster(int exp) { }
};

class Team
{
protected:
	int memberCount;
	Character* member[10];
public:
	Team();
	~Team();
	void addWarrior(string name, int lv);
	void addWizard(string name, int lv);
	void addDawnWarrior(string name, int lv);
	void addBerserkers(string name, int lv);
	void memberBeatMonster(string name, int exp);
	void print();
	void combat(Monster *m);
};

Team::Team()
{
	memberCount = 0;
	for(int i = 0; i < 10; i++)
		member[i] = 0;
}

Team::~Team()
{
	for(int i = 0; i < memberCount; i++)
		delete member[i];
}

void Team::addWarrior(string name, int lv)
{
	if(memberCount < 10)
	{
		member[memberCount] = new Warrior(name, lv);
		memberCount++;
	}
}

void Team::addWizard(string name, int lv)
{
	if(memberCount < 10)
	{
		member[memberCount] = new Wizard(name, lv);
		memberCount++;
	}
}

void Team::addDawnWarrior(string name, int lv)
{
	if(memberCount < 10)
	{
		member[memberCount] = new DawnWarrior(name, lv);
		memberCount++;
	}
}

void Team::addBerserkers(string name, int lv)
{
	if(memberCount < 10)
	{
		member[memberCount] = new Berserkers(name, lv);
		memberCount++;
	}
}
void Team::memberBeatMonster(string name, int exp)
{
	for(int i = 0; i < memberCount; i++)
	{
		if(member[i]->getName() == name)
		{
			member[i]->beatMonster(exp);
			break;
		}
	}
}

void Team::print()
{
	for(int i = 0; i < memberCount; i++)
		member[i]->print();
}



void Team::combat(Monster* m)
{
	int teamHP = 1000;

	while(m->getHP() > 0 && teamHP > 0)
	{

		int aliveMemberCount = 0;
		// Count how many players' HP is larger than 0
		for(int i = 0; i < memberCount; i++)
			if(member[i]->getHP() > 0)
				aliveMemberCount++;

		// monster attack
		for(int i = 0; i < memberCount; i++)
			if(member[i]->getHP() > 0){
				member[i]->setHP(member[i]->getHP() - m->getAttack()/aliveMemberCount);

		// team player attack	
		for(int i = 0; i < memberCount; i++)
			if(member[i]->getHP() > 0)
				m->setHP(m->getHP() - member[i]->getAttack());

		// caculate the team HP
		teamHP = 0;
		for(int i = 0; i < memberCount; i++)
			if(member[i]->getHP() > 0)
				teamHP += member[i]->getHP();
	}

	if(m->getHP() <= 0)
	{
		cout << "Win" << endl;
		this->print();
	}
	else
	{
		cout << "Lose" << endl;
		m->print();
	}
}}



int main()
{
	int mHP, mPower, mKnowledge;

	cin >> mHP >> mPower >> mKnowledge; // 輸入怪獸的HP、power、knowledge
	Monster mon(mHP, mPower, mKnowledge);

        Team myTeam;
        string name;
        int lv=0, role=0, memberCount=0;

        while(!cin.eof())
        {
                name = "";
                if(memberCount < 10)
                {
                        cin >> name >> lv >> role; // 輸入團隊中每個角色的姓名、初始等級與角色，role=1為Warrior，role=2為Wizard。
                        if(name == "")
                                break;

                        if(role == 1)
                        {
                                myTeam.addWarrior(name, lv); // 增加團隊成員
                                memberCount++;
                        }
			else if(role == 2)
			{
                                myTeam.addWizard(name, lv); // 增加團隊成員
                                memberCount++;
			}
			else if(role == 3)
			{
                                myTeam.addDawnWarrior(name, lv); // 增加團隊成員
                                memberCount++;
			}
			else if(role == 4)
			{
                                myTeam.addBerserkers(name, lv); // 增加團隊成員
                                memberCount++;
			}
                }
        }

        myTeam.combat(&mon); // 進行戰鬥並列印結果

        return 0;

}
